.DEFAULT_GOAL := all

# Written for Gnu-Make 4.4.1

# Default target - linux_x64
TARGET_OS=linux


# Downloads/updates all dependencies and builds them for the target arch
# Set the following before invoking
# USAGE:
# make => compiles for linux
# make TARGET_OS=win => cross compiles with mingw
# make TARGET_OS=osx => cross compiles with osx
# make -j N_JOBS works fine 
#

# Build version
BUILD_ID=$(shell git rev-parse HEAD)

# Paths for building dependencies
PWD=$(shell pwd)
BASE=$(PWD)
INCLUDE_OUT=$(PWD)/include
TEMP=$(PWD)/temp/$(TARGET_OS)/
DLCACHE=$(PWD)/download_cache/
SH=sh

# Autogenerated code from outside sources
AUTOGEN=$(PWD)/autogen/
TEXTUREC=$(AUTOGEN)/texturec.lzz
# built from bimg 

#######################################################################################
# Platform stuff
EXTLIB=$(PWD)
include platform.mk

# Copy dll stuff
SYSTEM_SO_SRC=$(addprefix $(T2_SYSTEM_SO_LOCATION), $(T2_SYSTEM_SO))
SYSTEM_SO_DST=$(addprefix $(LIB), $(T2_SYSTEM_SO))

#######################################################################################
# function hecho - prints $(1)$(2)$(3) with $(2) in bold
define hecho
	echo -e "$(1)\033[1m$(2)\033[0m$(3)"
endef

# Function fetch_git_release - checks a git release against local version, downloads if different
#echo "LATEST [$$LATEST]" ; \
#echo "EXTENSION [$(1)] [$(2)] [$(3)] [$(4)]\n scripts/fetch_git_release.sh $(2) $(3) $(4)" ; \

define fetch_git_release
	# Download the latest git release if not existing
	# will check download_cache first for a local copy of the latest tarfile
	# untar's in temp/
	LATEST=`sh $(PWD)/scripts/fetch_git_release.sh $(2) $(3) $(4)` ; \
	if [ "`cat $(1)/git_release.txt`" != "$$LATEST" ] ; then \
		TARFILE=$${LATEST##*/} ; \
		cd $(TEMP) ; \
		cp -f $(DLCACHE)/$(1)/$$TARFILE . || \
		wget https://www.github.com/$$LATEST ; \
		mkdir -p $(DLCACHE)/$(1)/ ; \
		cp -f $$TARFILE $(DLCACHE)/$(1)/ ; \
		echo -e "Downloaded \033[1m$(1)\033[0m..." ; \
		echo -e "Copying \033[1m$(1)\033[0m ..." ; \
		mkdir -p $(PWD)/$(1) ; \
		mkdir -p $(TEMP)/$(1) ; \
		if [ "$(4)" == "tar.gz" ] ; then \
			tar -xvf $$TARFILE --strip 1 -C $(TEMP)/$(1) ; \
			rm -f $$TARFILE ; \
			cd .. ; \
			mv -f $(TEMP)/$(1)/* $(PWD)/$(1)/ ; \
		else \
			mv -f $$TARFILE $(PWD)/$(1)/ ; \
		fi ; \
		echo $$LATEST > $(PWD)/$(1)/git_release.txt ; \
	else \
		echo -e "\033[1m$(1)\033[0m is up to date" ; \
	fi
endef

# Function fetch_git_repro - downloads a git repro and checks against the local copy
define fetch_git_repro
	$(call hecho,"Checking ",$(1)," for updates...")
	cd $(TEMP) ; \
	git clone --quiet --depth 1 $(2)
	# Check for new branch
	if [ "`cd $(TEMP)/$(1); git rev-parse HEAD`" != "`cd $(PWD)/$(1); git rev-parse HEAD`" ]; then \
		echo -e "Copying \033[1m$(1)\033[0m ..." ; \
		rm -rf $(PWD)/$(1) ; \
		mv -f $(TEMP)/$(1) $(PWD)/$(1) ; \
	else \
		echo -e "\033[1m$(1)\033[0m is up to date" ; \
	fi
endef

#######################################################################################
# PHONEY targets

.PHONEY: make_dirs
make_dirs:
	@mkdir -p $(LIB)
	@mkdir -p $(INCLUDE_OUT)
	@mkdir -p $(TEMP)
	@mkdir -p $(DLCACHE)
	@mkdir -p $(AUTOGEN)
# loopback for compiling. This is so that you can use #include <extlib/include/...> to explicity include something from extlib without having to write out full relative paths or accidentally including the wrong headers
	@ln -sf $(PWD) $(INCLUDE_OUT)/extlib

.PHONEY: clear_temp
clear_temp:
	@rm -rf $(TEMP)

# deletes everything except the download cache
nuke:
	rm -rf $(ALL_SOURCES)
	rm -rf $(LIB)/*.bin
	rm -rf $(TEMP)
	rm -rf $(INCLUDE_OUT)
	rm -rf $(AUTOGEN)
	rm -rf sdl sdl-osx sdl-mingw
	
.PHONEY: common
common: make_dirs

#######################################################################################
# Actual Targets
# Note: Binary targets create a .bin file in the $(LIB) directory to mark the dependency
# as built. Binary targets also depend on the previous target (so bgfx.bin depends on assimp.bin)
# 
ALL_SOURCES=$(EXTRA_TARGETS) lzz-bin assimp btMultilevelProjectedHeightmap bullet bx bimg bgfx bgfx-header-extension-library concurrentqueue FastString fmt glm libbacktrace libdeflate lua-luajit-compound-operators nanovg nanovg-command-buffer node-unidecode-cxx quant rapidjson readerwriterqueue sdl-stb-font snappy sol2 stb stt-obj sttr tsl vecgui vg-renderer xxHash
ALL_BINARIES=$(SYSTEM_SO_DST) $(LIB)/assimp.bin $(LIB)/bgfx.bin $(LIB)/bullet.bin $(LIB)/libbacktrace.bin $(LIB)/libdeflate.bin $(LIB)/lua-luajit-compound-operators.bin $(LIB)/snappy.bin

# Dependancy list to make things build *in order*
# You can disable this to make things all build at the same time (if you can handle the console spam)
ASSIMP_ALL_DEPS=$(ALL_SOURCES)
BGFX_ALL_DEPS=$(ASSIMP_ALL_DEPS) $(LIB)/assimp.bin
BULLET_ALL_DEPS=$(BGFX_ALL_DEPS) $(LIB)/bgfx.bin
LIBBACKTRACE_ALL_DEPS=$(BULLET_ALL_DEPS) $(LIB)/bullet.bin
LIBDEFLATE_ALL_DEPS=$(LIBBACKTRACE_ALL_DEPS) $(LIB)/libbacktrace.bin
LUA_ALL_DEPS=$(LIBDEFLATE_ALL_DEPS) $(LIB)/libdeflate.bin
SNAPPY_ALL_DEPS=$(LUA_ALL_DEPS) $(LIB)/lua-luajit-compound-operators.bin


#######################################################################################
# .dll files (libc++, etc)
$(SYSTEM_SO_DST):
	cp -a $(SYSTEM_SO_SRC) $(LIB)

#######################################################################################
# lzz-bin
lzz-bin:
	@make -s common
	@rm -rf $(TEMP)/lzz-bin
	@$(call fetch_git_repro,lzz-bin,"https://github.com/SnapperTT/lzz-bin")
	rm -f $(INCLUDE_OUT)/lzz-bin
	ln -s $(PWD)/lzz-bin $(INCLUDE_OUT)/lzz-bin
	@$(call hecho,"Done syncing", "lzz-bin"," repro") 


#######################################################################################
# Assimp
ASSIMP_BUILD_FLAGS=ASSIMP_NO_EXPORT=ON ASSIMP_BUILD_ALL_IMPORTERS_BY_DEFAULT=OFF ASSIMP_BUILD_OBJ_IMPORTER=ON ASSIMP_BUILD_GLTF_IMPORTER=ON ASSIMP_ENABLE_BOOST_WORKAROUND=ON BUILD_SHARED_LIBS=ON BUILD_TESTING=OFF ASSIMP_BUILD_ASSIMP_TOOLS=OFF ASSIMP_BUILD_TESTS=OFF ASSIMP_BUILD_SAMPLES=OFF ASSIMP_WARNINGS_AS_ERRORS=OFF

ASSIMP_BUILD_FLAGS_CMAKE=$(addprefix -D,$(ASSIMP_BUILD_FLAGS))

assimp:
	@make -s common
	@rm -rf $(TEMP)/assimp
	@$(call fetch_git_release,assimp,"https://github.com/assimp/assimp",Source,tar.gz)
# patch minizip issue
	sed -i 's/mapping.zopendisk_file = (opendisk_file_func)opendisk\;/\#ifdef ZOPENDISK64\nmapping.zopendisk_file = (opendisk_file_func)opendisk;\n\#endif/g' $(PWD)/assimp/code/Common/ZipArchiveIOSystem.cpp
#patch ASSIMP_BUILD_NO_ARMATUREPOPULATE_PROCESS in ArmaturePopulate
	sed -i 's/bone->mArmature = armature//g' $(PWD)/assimp/code/PostProcessing/ArmaturePopulate.cpp
	sed -i 's/bone->mNode = bone_node//g' $(PWD)/assimp/code/PostProcessing/ArmaturePopulate.cpp
# symlink includes
	rm -f $(INCLUDE_OUT)/assimp
	ln -s $(PWD)/assimp/include/assimp $(INCLUDE_OUT)/assimp
	@$(call hecho,"Done syncing", "assimp"," repro")
	
$(LIB)/assimp.bin: $(ASSIMP_ALL_DEPS) assimp
	@make -s common
	@rm -rf $(TEMP)/assimp
	$(CMAKE) -G "Unix Makefiles" $(ASSIMP_BUILD_FLAGS_CMAKE) $(CMAKE_TOOLCHAIN) -B $(TEMP)/assimp -S $(PWD)/assimp
	cd $(TEMP)/assimp ; make -s
	cp -v $(TEMP)/assimp/bin/lib* $(LIB)/
#	mv -f $(LIB)/libassimp-5.dll $(LIB)/libassimp.dll || : 
	cp -va $(TEMP)/assimp/include/assimp/config.h $(INCLUDE_OUT)/assimp/
	@echo "foo" > $(LIB)/assimp.bin
	@$(call hecho,"Done building", "assimp","")


#######################################################################################
# bgfx
bx:
	@make -s common
	@rm -rf $(TEMP)/bx
	@$(call fetch_git_repro,bx,"https://github.com/bkaradzic/bx")
# patch bx's debug functions
	patch -R $(PWD)/bx/src/debug.cpp -i bx_debug.cpp.patch
	patch -R $(PWD)/bx/include/bx/debug.h -i bx_debug.h.patch
	rm -f $(INCLUDE_OUT)/bx
	ln -s $(PWD)/bx/include/bx $(INCLUDE_OUT)/bx
	ln -s $(PWD)/bx/include/compat $(INCLUDE_OUT)/bx_compat
	@$(call hecho,"Done syncing", "bx"," repro") 
	
bimg:
	@make -s common
	@rm -rf $(TEMP)/bimg
	@$(call fetch_git_repro,bimg,"https://github.com/bkaradzic/bimg")
	rm -f $(INCLUDE_OUT)/bimg $(INCLUDE_OUT)/bimg_3rdparty
	ln -s $(PWD)/bimg/include/bimg $(INCLUDE_OUT)/bimg
	ln -s $(PWD)/bimg/3rdparty $(INCLUDE_OUT)/bimg_3rdparty
	@$(call hecho,"Done syncing", "bimg"," repro") 
	
$(TEXTUREC): bimg
	@make -s common
	cp -af bimg/tools/texturec/texturec.cpp $(TEXTUREC).tmp
	sed -i 's/struct Options/namespace bimgTexturec \{\nstruct Options/' $(TEXTUREC).tmp
	sed -i 's/\}\;/\}\;\n\}\n#end\n\n#src\n#include \"..\/textureCache.hh\"\n#end\n\nnamespace bimgTexturec \{\n/' $(TEXTUREC).tmp
	sed -i '1s/^/\/\/File is autogenerated by updateBgfx.sh\n\n#hdr\n\#define BX_CONFIG_DEBUG 1\n/' $(TEXTUREC).tmp
	sed -i '/bool linear.*/a uint32_t widthOverride=0;\nuint32_t heightOverride=0;' $(TEXTUREC).tmp
	sed -i '/void help/,$$d' $(TEXTUREC).tmp
	sed -i 's/uint32_t outputWidth.*=/uint32_t outputWidth = _options.widthOverride ? _options.widthOverride : /' $(TEXTUREC).tmp
	sed -i 's/uint32_t outputHeight.*=/uint32_t outputHeight = _options.heightOverride ? _options.heightOverride : /' $(TEXTUREC).tmp
	sed -i 's/const void\* _inputData/bimg::ImageContainer\* _input, const void\* _inputData/' $(TEXTUREC).tmp
	sed -i 's/bimg\:\:ImageContainer\* input.*=/bimg::ImageContainer* input = _input ? _input : /' $(TEXTUREC).tmp
	sed -i 's/bimg\:\:imageFree(input)/if (\!_input) bimg\:\:imageFree(input)/g' $(TEXTUREC).tmp
	sed -i 's/bimg\:\:imageEncodeFromRgba32f/bimgTexturec\:\:imageEncodeFromRgba32f/g' $(TEXTUREC).tmp
	sed -i 's/bx\:\:printf/\/\/bx\:\:printf\nBX_UNUSED/g' $(TEXTUREC).tmp
	echo -e '\n}' >> $(TEXTUREC).tmp
	mv -vf $(TEXTUREC).tmp $(TEXTUREC)

bgfx:
	@make -s common
	@rm -rf $(TEMP)/bgfx
	@$(call fetch_git_repro,bgfx,"https://github.com/snappertt/bgfx")
#	sed -i '/if (s_extension\[Extension::ARB_clip/,+6{ s/^\/\///}' $(PWD)/bgfx/src/renderer_gl.cpp
# Speed up compile by skipping tools and examples
# note - we still need libbimg_encode.a, so we still have to make tools. Patch a custom rule to build libimg_encode without the other stuff
	echo -e "if _OPTIONS[\"with-tools-turf2\"] then "       >> $(PWD)/bgfx/scripts/genie.lua
	echo -e "	group \"libs\""                             >> $(PWD)/bgfx/scripts/genie.lua
	echo -e "	dofile(path.join(BIMG_DIR, \"scripts/bimg_encode.lua\"))" >> $(PWD)/bgfx/scripts/genie.lua
	echo -e "end"                                           >> $(PWD)/bgfx/scripts/genie.lua
	sed -i 's/trigger = "with-tools"/trigger = "with-tools-turf2"/g' $(PWD)/bgfx/scripts/genie.lua
	sed -i 's/--with-tools/--with-tools-turf2/g' $(PWD)/bgfx/makefile
	sed -i 's/--with-tools-turf2-turf2/--with-tools-turf2/g' $(PWD)/bgfx/makefile
	sed -i 's/--with-combined-examples//g' $(PWD)/bgfx/makefile
	cd $(PWD)/bgfx/ && patch -s -p0 < $(PWD)/bgfx.patch
# patch to re-enable osx64 bit
	echo -n -e "\n.build/projects/gmake-osx-x64:\n"                                                                 >> $(PWD)/bgfx/makefile
	echo -n -e "	\$$(GENIE) --with-tools-turf2 --with-combined-examples --with-shared-lib --gcc=osx-x64 gmake\n" >> $(PWD)/bgfx/makefile
	echo -n -e "osx-x64-debug: .build/projects/gmake-osx-x64 ## Build - macOS x64 Debug\n"                          >> $(PWD)/bgfx/makefile
	echo -n -e "	\$$(MAKE) -C .build/projects/gmake-osx-x64 config=debug\n"                                      >> $(PWD)/bgfx/makefile
	echo -n -e "osx-x64-release: .build/projects/gmake-osx-x64 ## Build - macOS x64 Release\n"                      >> $(PWD)/bgfx/makefile
	echo -n -e "	\$$(MAKE) -C .build/projects/gmake-osx-x64 config=release\n"                                    >> $(PWD)/bgfx/makefile
	echo -n -e "osx-x64: osx-x64-debug osx-x64-release ## Build - macOS x64 Debug and Release\n\n"                  >> $(PWD)/bgfx/makefile
	rm -f $(INCLUDE_OUT)/bgfx
	ln -s $(PWD)/bgfx/include/bgfx $(INCLUDE_OUT)/bgfx
	@$(call hecho,"Done syncing", "bgfx"," repro")
	
	
$(LIB)/bgfx.bin: $(BGFX_ALL_DEPS) bx bimg bgfx $(TEXTUREC)
	@make -s common
#	@rm -rf $(TEMP)/bx $(TEMP)/bimg $(TEMP)/bgfx
	cp -af $(PWD)/bx $(TEMP)/bx
	cp -af $(PWD)/bimg $(TEMP)/bimg
	cp -af $(PWD)/bgfx $(TEMP)/bgfx
	cd $(TEMP)/bgfx ; $(BGFX_MAKE)
	cp -avf $(TEMP)/bgfx/.build/*/bin/* $(LIB)/
	@echo "foo" > $(LIB)/bgfx.bin
	@$(call hecho,"Done building", "bgfx","")
	
	
#######################################################################################
# bgfx-header-extension-library
bgfx-header-extension-library:
	@make -s common
	@rm -rf $(TEMP)/bgfx-header-extension-library
	@$(call fetch_git_repro,bgfx-header-extension-library,"https://github.com/SnapperTT/bgfx-header-extension-library")
	rm -f $(INCLUDE_OUT)/bgfx-header-extension-library
	ln -s $(PWD)/bgfx-header-extension-library $(INCLUDE_OUT)/bgfxh
	@$(call hecho,"Done syncing", "bgfx-header-extension-library"," repro") 


#######################################################################################
# btMultilevelProjectedHeightmap
btMultilevelProjectedHeightmap:
	@make -s common
	@rm -rf $(TEMP)/btMultilevelProjectedHeightmap
	@$(call fetch_git_repro,btMultilevelProjectedHeightmap,"https://github.com/SnapperTT/btMultilevelProjectedHeightmap")
	rm -f $(INCLUDE_OUT)/btMultilevelProjectedHeightmap
	ln -s $(PWD)/btMultilevelProjectedHeightmap $(INCLUDE_OUT)/btMultilevelProjectedHeightmap
	@$(call hecho,"Done syncing", "btMultilevelProjectedHeightmap"," repro") 


#######################################################################################
# Bullet physics

# Bullet build settings
# We only want to build the base lib, so turn everything else off and enable double precision 
#BULLET_BUILD_SSE_FLAGS=BT_USE_SSE=ON BT_USE_SSE_IN_API=ON BT_USE_SIMD_VECTOR3=ON
# sseflags do nothing, bullet maintainers just rely on compiler auto-optimisations
BULLET_BUILD_SSE_FLAGS=
BULLET_BUILD_FLAGS=$(BULLET_BUILD_SSE_FLAGS) BT_USE_OPENMP=0 BUILD_BULLET3=OFF BUILD_BULLET2_DEMOS=OFF BUILD_CLSOCKET=OFF BUILD_CPU_DEMOS=OFF BUILD_ENET=OFF BUILD_EGL=OFF BUILD_EXTRAS=OFF BUILD_OPENGL3_DEMOS=OFF BUILD_PYBULLET=OFF BUILD_OPENGL3_DEMOS=OFF BUILD_PYBULLET=OFF BUILD_UNIT_TESTS=OFF BUILD_SHARED_LIBS=ON BULLET2_MULTITHREADING=ON USE_DOUBLE_PRECISION=ON CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_CXX_FLAGS=-ggdb CMAKE_RELWITHDEBINFO_POSTFIX=_turf2
BULLET_BUILD_FLAGS_CMAKE=$(addprefix -D,$(BULLET_BUILD_FLAGS))

# Sync Repro
bullet:
	@make -s common
	@rm -rf $(TEMP)/bullet
	@$(call fetch_git_release,bullet,"https://github.com/bulletphysics/bullet3",Source,tar.gz)
# copy missing file
	cp -arf $(PWD)/bullet/examples/Importers/ImportColladaDemo/btMatrix4x4.h $(PWD)/bullet/src
# clean up crap
	@rm -rf $(PWD)/bullet/data $(PWD)/bullet/docs $(PWD)/bullet/examples $(PWD)/bullet/Extras/
# symlink includes
	rm -f $(INCLUDE_OUT)/bullet
	ln -s $(PWD)/bullet/src $(INCLUDE_OUT)/bullet
# apply patches
# Inject Voxel collision hooks
	patch $(PWD)/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.cpp -i btCollisionWorld.cpp.patch
	patch $(PWD)/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h   -i btCollisionWorld.h.patch
# Inject btConvex hull patch
	patch $(PWD)/bullet/src/BulletCollision/CollisionShapes/btConvexHullShape.cpp -i btConvexHullShape.cpp.patch
	patch $(PWD)/bullet/src/BulletCollision/CollisionShapes/btConvexHullShape.h   -i btConvexHullShape.h.patch
# Inject CUSTOM_CONCAVE_SHAPE_TYPE2, into broadphase proxy
	sed -i 's/= CUSTOM_CONCAVE_SHAPE_TYPE,/\t= CUSTOM_CONCAVE_SHAPE_TYPE,\n\tCUSTOM_CONCAVE_SHAPE_TYPE2,/g' $(PWD)/bullet/src/BulletCollision/BroadphaseCollision/btBroadphaseProxy.h
# Inject type info into 
	sed -i 's/virtual void processTriangle/inline virtual bool isConvexTriangleCallback() const { return true; }\n\tvirtual void processTriangle/g' $(PWD)/bullet/src/BulletCollision/CollisionDispatch/btConvexConcaveCollisionAlgorithm.h
	sed -i 's/virtual void processTriangle/inline virtual bool isConvexTriangleCallback() const { return false; }\n\tvirtual void processTriangle/g' $(PWD)/bullet/src/BulletCollision/CollisionShapes/btTriangleCallback.h
# Make private members "public"
	sed -i 's/btVector3 m_aabbMin;/public:\n\tbtVector3 m_aabbMin;/g' $(PWD)/bullet/src/BulletCollision/CollisionDispatch/btConvexConcaveCollisionAlgorithm.h
# Inject default constructor for btVector3
	sed -i 's/SIMD_FORCE_INLINE btVector3()/SIMD_FORCE_INLINE btVector3() = default; void nullFunc()/g' $(PWD)/bullet/src/LinearMath/btVector3.h
# Fix unused resultNormal
	sed -i '1238s/btVector3 resultNormal/\/\/btVector3 resultNormal/' $(PWD)/bullet/src/BulletCollision/BroadphaseCollision/btDbvt.h
	sed -i '1296s/btVector3 resultNormal/\/\/btVector3 resultNormal/' $(PWD)/bullet/src/BulletCollision/BroadphaseCollision/btDbvt.h
# Patch cmake lists
	sed -i 's/cmake_minimum_required(VERSION 2.4.3)/cmake_minimum_required(VERSION 3.5)/' $(PWD)/bullet/CMakeLists.txt
	@$(call hecho,"Done syncing", "bullet"," repro")

# Compile Bullet lib
$(LIB)/bullet.bin: $(BULLET_ALL_DEPS) bullet
	@make -s common
	@rm -rf $(TEMP)/bullet
	$(CMAKE) -G "Unix Makefiles" $(BULLET_BUILD_FLAGS_CMAKE) $(CMAKE_TOOLCHAIN) -B $(TEMP)/bullet -S $(PWD)/bullet
	cd $(TEMP)/bullet ; make -s
# copy files to $(LIB) (every platform seems to put them in a different place)
	cp -arf $(TEMP)/bullet/src/Bullet*/lib* $(LIB)/ || :
	cp -arf $(TEMP)/bullet/src/LinearMath/lib* $(LIB)/ || :
	cp -a $(TEMP)/bullet/lib/* $(LIB) || :
	find $(TEMP)/bullet -name '*dylib' -exec cp -rafv {} $(LIB)/ \; || :
	@echo "foo" > $(LIB)/bullet.bin
	@$(call hecho,"Done building", "bullet","")


#######################################################################################
# concurrentqueue
concurrentqueue:
	@make -s common
	@rm -rf $(TEMP)/concurrentqueue
	@$(call fetch_git_release,concurrentqueue,"https://github.com/cameron314/concurrentqueue",Source,tar.gz)
	rm -f $(INCLUDE_OUT)/conqueue
	ln -s $(PWD)/concurrentqueue $(INCLUDE_OUT)/conqueue
	@$(call hecho,"Done syncing", "conqueue"," repro")


#######################################################################################
# FastString
FastString:
	@make -s common
	@rm -rf $(TEMP)/FastString
	@$(call fetch_git_repro,FastString,"https://github.com/SnapperTT/FastString")
	rm -f $(INCLUDE_OUT)/FastString
	ln -s $(PWD)/FastString/include $(INCLUDE_OUT)/FastString
	@$(call hecho,"Done syncing", "FastString"," repro") 


#######################################################################################
# fmt
fmt:
	@make -s common
	@rm -rf $(TEMP)/fmt
	@$(call fetch_git_repro,fmt,https://github.com/fmtlib/fmt)
	rm -f $(INCLUDE_OUT)/fmt
	ln -s $(PWD)/fmt/include/fmt $(INCLUDE_OUT)/fmt
# replace std::string with fmt_std::string
	find $(PWD)/fmt/ -type f -name "*.h"  -exec sed -i -e 's/std::string/fmt_std::string/g' {} +
	find $(PWD)/fmt/ -type f -name "*.cc" -exec sed -i -e 's/std::string/fmt_std::string/g' {} +
	find $(PWD)/fmt/ -type f -name "*.h"  -exec sed -i -e 's/std::basic_string<Char>/fmt_std::string/g' {} +
	find $(PWD)/fmt/ -type f -name "*.cc"  -exec sed -i -e 's/std::basic_string<Char>/fmt_std::string/g' {} +
	find $(PWD)/fmt/ -type f -name "*.h"  -exec sed -i -e 's/std::basic_string<PathChar>/fmt_std::string/g' {} +
	find $(PWD)/fmt/ -type f -name "*.cc" -exec sed -i -e 's/std::basic_string<PathChar>/fmt_std::string/g' {} +
	find $(PWD)/fmt/ -type f -name "*.h"  -exec sed -i -e 's/system_error(ec, vformat(fmt, args)/system_error(ec, vformat(fmt, args).c_str()/g' {} +
	
	
	cp -af $(PWD)/fmt/src/* $(PWD)/fmt/include/fmt
	@$(call hecho,"Done syncing", "fmt"," repro") 	


#######################################################################################
# gettext
#GETTEXT_VERSION=0.22.4
#
#gettext:
#	@make -s common
#	@rm -rf $(TEMP)/gettext
#	mkdir -p $(TEMP)/gettext
#	cd $(TEMP)/gettext && \
#	wget https://ftp.gnu.org/pub/gnu/gettext/gettext-$(GETTEXT_VERSION).tar.gz && \
#	tar -xvf gettext-$(GETTEXT_VERSION).tar.gz --strip 1 && \
#	mkdir -p $(PWD)/gettext && \
#	cp -af $(TEMP)/gettext/* $(PWD)/gettext
#	@$(call hecho,"Done syncing", "gettext"," repro") 	
#
#
#$(LIB)/gettext.bin: gettext
#	@make -s common
#	@rm -rf $(TEMP)/gettext
#	@cp -arf $(PWD)/gettext $(TEMP)/gettext
#	cd $(TEMP)/gettext && ./configure $(CONFIGURE)
## gettext/gettext-runtime/makefile needs .version, but this is only generated by gettext/makefile
#	echo "$(GETTEXT_VERSION)" > $(TEMP)/gettext/.version
#	cd $(TEMP)/gettext/gettext-runtime && make
#	cp -rf $(TEMP)/gettext/gettext-runtime/intl/.libs/libintl.a $(LIB)/
#	rm -rf $(INCLUDE_OUT)/intl-osx
#	mkdir -p $(INCLUDE_OUT)/intl-osx
#	cp -rf $(TEMP)/gettext/gettext-runtime/intl $(INCLUDE_OUT)/intl-osx/
#	@echo "foo" > $(LIB)/gettext.bin
#	@$(call hecho,"Done building", "gettext","") 	
#	

#######################################################################################
# glm
glm:
	@make -s common
	@rm -rf $(TEMP)/glm
	@$(call fetch_git_release,glm,https://github.com/g-truc/glm,Source,tar.gz)
	rm -f $(INCLUDE_OUT)/glm
	ln -s $(PWD)/glm/glm $(INCLUDE_OUT)/glm
	@$(call hecho,"Done syncing", "glm"," repro") 


#######################################################################################
# libbacktrace 
libbacktrace:
	@make -s common
	@rm -rf $(TEMP)/libbacktrace
	@$(call fetch_git_repro,libbacktrace,"https://github.com/ianlancetaylor/libbacktrace")
	rm -f $(INCLUDE_OUT)/libbacktrace
	ln -s $(PWD)/libbacktrace $(INCLUDE_OUT)/libbacktrace
	@$(call hecho,"Done syncing", "libbacktrace"," repro") 

$(LIB)/libbacktrace.bin: $(LIBBBACKTRACE_ALL_DEPS) libbacktrace
	@make -s common
	@rm -rf $(TEMP)/libbacktrace
	@cp -arf $(PWD)/libbacktrace $(TEMP)/libbacktrace
	cd $(TEMP)/libbacktrace && CC=$(CC) CXX=$(CXX) ./configure $(CONFIGURE)
	cd $(TEMP)/libbacktrace && make
	cp -arf $(TEMP)/libbacktrace/.libs/* $(LIB)/
	@echo "foo" > $(LIB)/libbacktrace.bin
	@$(call hecho,"Done building", "libbbacktrace","")


#######################################################################################
# libDeflate
libdeflate:
	@make -s common
	@rm -rf $(TEMP)/libdeflate
	@$(call fetch_git_release,libdeflate,"https://github.com/ebiggers/libdeflate",Source,tar.gz)
	rm -f $(INCLUDE_OUT)/libdeflate.h
	ln -s $(PWD)/libdeflate/libdeflate.h $(INCLUDE_OUT)/libdeflate.h
	@$(call hecho,"Done syncing", "libdeflate"," repro")
	
$(LIB)/libdeflate.bin: $(LIBDEFLATE_ALL_DEPS) libdeflate
	@make -s common
	@rm -rf $(TEMP)/libdeflate
	$(CMAKE) -G "Unix Makefiles" $(ASSIMP_BUILD_FLAGS_CMAKE) $(CMAKE_TOOLCHAIN) -B $(TEMP)/libdeflate -S $(PWD)/libdeflate
	cd $(TEMP)/libdeflate ; make -s
	cp -v $(TEMP)/libdeflate/libdeflate* $(LIB)/
	@echo "foo" > $(LIB)/libdeflate.bin
	@$(call hecho,"Done building", "libdeflate","")


#######################################################################################
# patched lua
lua-luajit-compound-operators:
	@make -s common
	@rm -rf $(TEMP)/lua-luajit-compound-operators
	@$(call fetch_git_repro,lua-luajit-compound-operators,https://github.com/SnapperTT/lua-luajit-compound-operators)
	cd $(PWD)/lua-luajit-compound-operators/ && $(SH) ./fetch_and_apply_lua.sh
	cd $(PWD)/lua-luajit-compound-operators/ && $(SH) ./fetch_and_apply_luajit.sh
	ln -s $(PWD)/lua-luajit-compound-operators/link_to_lua52/src $(INCLUDE_OUT)/lua
	ln -s $(PWD)/lua-luajit-compound-operators/link_to_luajit/src $(INCLUDE_OUT)/luajit
	ln -s $(INCLUDE_OUT)/luajit/luajit_rolling.h $(INCLUDE_OUT)/luajit/luajit.h || :
	@$(call hecho,"Done syncing", "lua-luajit-compound-operators"," repro") 
	
$(LIB)/lua-luajit-compound-operators.bin: $(LUA_ALL_DEPS) lua-luajit-compound-operators
	@make -s common
	@rm -rf $(TEMP)/lua-luajit-compound-operators
	@mkdir -p $(TEMP)/lua-luajit-compound-operators/
	@cp -rf $(PWD)/lua-luajit-compound-operators/* $(TEMP)/lua-luajit-compound-operators/
	cd $(TEMP)/lua-luajit-compound-operators/lua52/lua-5.2.4 && make -s $(LUA_MAKE)
	cd $(TEMP)/lua-luajit-compound-operators/lua52/lua-5.2.4/src/ && cp -arfv *.a *.dll *.exe $(LIB)/ || :
	cd $(TEMP)/lua-luajit-compound-operators/v2.1.ROLLING/ && make -s $(LUAJIT_MAKE)
	cd $(TEMP)/lua-luajit-compound-operators/v2.1.ROLLING/src/ && cp -arfv *.a *.dll *.exe $(LIB)/ || :
	@echo "foo" > $(LIB)/lua-luajit-compound-operators.bin
	@$(call hecho,"Done building", "patched lua and luajit","")


#######################################################################################
# nanovg
nanovg:
	@make -s common
	@rm -rf $(TEMP)/nanovg
	@$(call fetch_git_repro,nanovg,"https://github.com/memononen/nanovg")
# apply patches that disable fontstash (we are using sdl-stb-font
	sed -i 's/#define FONTSTASH/\/\/&/' $(PWD)/nanovg/src/nanovg.c
	sed -i 's/#include "fontstash.h"/\/\/&/' $(PWD)/nanovg/src/nanovg.c
	sed -i 's/#define STB_IMAGE_IMPLEMENTATION/\/\/&/' $(PWD)/nanovg/src/nanovg.c
	sed -i 's/#define STB_TRUETYPE_IMPLEMENTATION/#if 0\n&/' $(PWD)/nanovg/src/fontstash.h
	sed -i 's/#include "stb_truetype.h"/&\n#endif/' $(PWD)/nanovg/src/fontstash.h
	rm -f $(INCLUDE_OUT)/nanovg
	ln -s $(PWD)/nanovg/src $(INCLUDE_OUT)/nanovg
	@$(call hecho,"Done syncing", "nanovg"," repro") 
	
	
#######################################################################################
# nanovg-command-buffer
nanovg-command-buffer:
	@make -s common
	@rm -rf $(TEMP)/nanovg-command-buffer
	@$(call fetch_git_repro,nanovg-command-buffer,"https://github.com/SnapperTT/nanovg-command-buffer")
	rm -f $(INCLUDE_OUT)/nanovg-command-buffer
	ln -s $(PWD)/nanovg-command-buffer $(INCLUDE_OUT)/nanovg-command-buffer
	@$(call hecho,"Done syncing", "nanovg-command-buffer"," repro") 
	
	
#######################################################################################
# unidecode
node-unidecode-cxx:
	@make -s common
	@rm -rf $(TEMP)/node-unidecode-cxx
	@$(call fetch_git_repro,node-unidecode-cxx,https://github.com/SnapperTT/node-unidecode-cxx)
# Pass exception by value warning
#	sed -i 's/utf8::exception/utf8::exception \& ex/g' $(PWD)/node-unidecode-cxx/src/unidecode.cxx
	rm -f $(INCLUDE_OUT)/unidecode
	ln -s $(PWD)/node-unidecode-cxx/src $(INCLUDE_OUT)/unidecode
	@$(call hecho,"Done syncing", "unidecode"," repro") 


#######################################################################################
# Quant
quant:
	@make -s common
	@rm -rf $(TEMP)/quant
	@$(call fetch_git_repro,quant,https://github.com/r-lyeh-archived/quant)
	rm -f $(INCLUDE_OUT)/quant
	ln -s $(PWD)/quant $(INCLUDE_OUT)/quant
	@$(call hecho,"Done syncing", "quant"," repro") 


#######################################################################################
# rapidjson
rapidjson:
	@make -s common
	@rm -rf $(TEMP)/rapidjson
	@$(call fetch_git_release,rapidjson,"https://github.com/Tencent/rapidjson",Source,tar.gz)
# Fix -Wclass-memaccess wobbly
	sed -i 's/std::memcpy(m,/std::memcpy((void*)m,/g' $(PWD)/rapidjson/include/rapidjson/document.h
	sed -i 's/std::memcpy(e,/std::memcpy((void*)e,/g' $(PWD)/rapidjson/include/rapidjson/document.h
# fix illegal assignement operator
	sed -i 's/GenericStringRef\& operator=(const GenericStringRef\& rhs)/\/\/GenericStringRef& operator=(const GenericStringRef& rhs)/g' $(PWD)/rapidjson/include/rapidjson/document.h
# fix itterator
	patch -s -p0 $(PWD)/rapidjson/include/rapidjson/document.h < $(PWD)/rapidjson.patch
# Symlink the include
	rm -f $(INCLUDE_OUT)/rapidjson
	ln -s $(PWD)/rapidjson/include/rapidjson $(INCLUDE_OUT)/rapidjson
	@$(call hecho,"Done syncing", "rapidjson"," repro")


#######################################################################################
# readerwriterqueue
readerwriterqueue:
	@make -s common
	@rm -rf $(TEMP)/readerwriterqueue
	@$(call fetch_git_release,readerwriterqueue,"https://github.com/cameron314/readerwriterqueue",Source,tar.gz)
	rm -f $(INCLUDE_OUT)/readerwriterqueue
	ln -s $(PWD)/readerwriterqueue $(INCLUDE_OUT)/readerwriterqueue
	@$(call hecho,"Done syncing", "readerwriterqueue"," repro")


#######################################################################################
# sdl
# Todo - filter for SDL3
$(LIB)/sdl-mingw.bin:
	@make -s common
	@$(call fetch_git_release,sdl-mingw,"https://github.com/libsdl-org/SDL",2.32.2-mingw,tar.gz)
	cp -af $(PWD)/sdl-mingw/x86_64-w64-mingw32/lib/* $(EXTLIB)/lib_win_x64
	cp -af $(PWD)/sdl-mingw/x86_64-w64-mingw32/bin/* $(EXTLIB)/lib_win_x64
	rm -f $(INCLUDE_OUT)/sdl-mingw
	ln -s $(PWD)/sdl-mingw/x86_64-w64-mingw32/include/SDL2 $(INCLUDE_OUT)/sdl-mingw
	ln -fs $(INCLUDE_OUT)/sdl-mingw $(INCLUDE_OUT)/sdl-mingw/SDL2
	@echo "foo" > $(LIB)/sdl-mingw.bin
	@$(call hecho,"Done syncing", "SDL MingW"," repro")

$(LIB)/sdl-osx.bin:
	@make -s common
	@rm -rf $(TEMP)/sdl
	@$(call fetch_git_release,sdl-osx,"https://github.com/libsdl-org/SDL",dmg,dmg)
	mkdir -p $(TEMP)/sdl
	cd $(TEMP)/sdl && 7z x $(PWD)/sdl-osx/*.dmg
	cp -raf $(TEMP)/sdl/SDL2/SDL2.framework/Versions/A/SDL2 $(LIB)
	cp -raf $(TEMP)/sdl/SDL2/SDL2.framework/Versions/A/Headers $(INCLUDE_OUT)/sdl-osx
	ln -fs $(INCLUDE_OUT)/sdl-osx $(INCLUDE_OUT)/sdl-osx/SDL2
	@echo "foo" > $(LIB)/sdl-osx.bin
	@$(call hecho,"Done syncing", "SDL Osx"," repro")

$(LIB)/sdl3-mingw.bin:
	@make -s common
	@$(call fetch_git_release,sdl-mingw,"https://github.com/libsdl-org/SDL",mingw,tar.gz)
	cp -af $(PWD)/sdl-mingw/x86_64-w64-mingw32/lib/* $(EXTLIB)/lib_win_x64
	cp -af $(PWD)/sdl-mingw/x86_64-w64-mingw32/bin/* $(EXTLIB)/lib_win_x64
	rm -f $(INCLUDE_OUT)/sdl-mingw
	ln -s $(PWD)/sdl-mingw/x86_64-w64-mingw32/include/SDL3 $(INCLUDE_OUT)/sdl-mingw
	ln -fs $(INCLUDE_OUT)/sdl-mingw $(INCLUDE_OUT)/sdl-mingw/SDL3
	@echo "foo" > $(LIB)/sdl3-mingw.bin
	@$(call hecho,"Done syncing", "SDL MingW"," repro")

$(LIB)/sdl3-osx.bin:
	@make -s common
	@rm -rf $(TEMP)/sdl
	@$(call fetch_git_release,sdl-osx,"https://github.com/libsdl-org/SDL",dmg,dmg)
	mkdir -p $(TEMP)/sdl
	cd $(TEMP)/sdl && 7z x $(PWD)/sdl-osx/*.dmg
	cp -raf $(TEMP)/sdl/SDL3/SDL3.xcframework/macos-arm64_x86_64/SDL3.framework/Versions/A/SDL3 $(LIB)
	cp -raf $(TEMP)/sdl/SDL3/SDL3.xcframework/macos-arm64_x86_64/SDL3.framework/Versions/A/Headers $(INCLUDE_OUT)/sdl-osx
	ln -fs $(INCLUDE_OUT)/sdl-osx $(INCLUDE_OUT)/sdl-osx/SDL3
	@echo "foo" > $(LIB)/sdl3-osx.bin
	@$(call hecho,"Done syncing", "SDL Osx"," repro")

#######################################################################################
# sdl-stb-font
sdl-stb-font:
	@make -s common
	@rm -rf $(TEMP)/sdl-stb-font
	@$(call fetch_git_repro,sdl-stb-font,https://github.com/SnapperTT/sdl-stb-font)
	rm -f $(INCLUDE_OUT)/sdl-stb-font
	ln -s $(PWD)/sdl-stb-font $(INCLUDE_OUT)/sdl-stb-font
	@$(call hecho,"Done syncing", "sdl-stb-font"," repro")


#######################################################################################
# snappy
SNAPPY_FLAGS=SNAPPY_BUILD_BENCHMARKS=OFF SNAPPY_BUILD_TESTS=OFF SNAPPY_INSTALL=OFF
SNAPPY_FLAGS_CMAKE=$(addprefix -D,$(SNAPPY_FLAGS))

snappy:
	@make -s common
	@rm -rf $(TEMP)/snappy
	@$(call fetch_git_release,snappy,"https://github.com/google/snappy",Source,tar.gz)
	rm -f $(INCLUDE_OUT)/snappy
	ln -s $(PWD)/snappy $(INCLUDE_OUT)/snappy
	sed -i "s/ (op + deferred_length) < op_limit_min_slop)/ static_cast<ptrdiff_t>(op + deferred_length) < op_limit_min_slop)/" $(PWD)/snappy/snappy.cc
	@$(call hecho,"Done syncing", "snappy"," repro")
	
$(LIB)/snappy.bin: $(SNAPPY_ALL_DEPS) snappy 
	@make -s common
	@rm -rf $(TEMP)/snappy
	$(CMAKE) -G "Unix Makefiles" $(SNAPPY_FLAGS_CMAKE) $(CMAKE_TOOLCHAIN) -B $(TEMP)/snappy -S $(PWD)/snappy
	cd $(TEMP)/snappy ; make -s
	cd $(TEMP)/snappy ; cp -avf *.a *.h $(LIB)/
	cd $(TEMP)/snappy ; [ -e *.dll ] && cp -avf *.dll $(LIB)/  || :
	mv -f $(LIB)/libsnappy.dll.a $(LIB)/libsnappy.a  || :
	@echo "foo" > $(LIB)/snappy.bin
	@$(call hecho,"Done building", "snappy","")


#######################################################################################
# sol2
sol2:
	@make -s common
	@rm -rf $(TEMP)/sol2
	@$(call fetch_git_release,sol2,https://github.com/ThePhD/sol2,Source,tar.gz)
	cd $(PWD)/sol2 && python3 single/single.py
# Fix bugs
	sed -i 's/#include <luajit\.h>/\/\/removed luajit.h include/g' $(PWD)/sol2/single/include/sol/sol.hpp
	sed -i 's/#include <lua\.h>/\/\/removed lua.h include/g' $(PWD)/sol2/single/include/sol/sol.hpp
	sed -i 's/#include <lauxlib\.h>/\/\/removed lauxlib.h include/g' $(PWD)/sol2/single/include/sol/sol.hpp
	sed -i 's/#include <lualib\.h>/\/\/removed lualib.h include/g' $(PWD)/sol2/single/include/sol/sol.hpp
	rm -f $(INCLUDE_OUT)/sol
	ln -s $(PWD)/sol2/single/include/sol $(INCLUDE_OUT)/sol
	sed -i 's/std::string/sol::string/g' $(PWD)/sol2/single/include/sol/*
	sed -i 's/const sol::string\& chunkname/const sol::string_view\& chunkname/g' $(PWD)/sol2/single/include/sol/*
	patch $(PWD)/sol2/single/include/sol/sol.hpp -i sol.patch
	sed -i '6766s/this->construct/new (static_cast<void*>(this)) optional(std::in_place, std::forward<Args>(args)...); return **this;\/\//' $(PWD)/sol2/single/include/sol/sol.hpp
	@$(call hecho,"Done syncing", "sol2"," repro") 


#######################################################################################
# stb
stb:
	@make -s common
	@rm -rf $(TEMP)/stb
	@$(call fetch_git_repro,stb,https://github.com/nothings/stb)
	rm -f $(INCLUDE_OUT)/stb
	ln -s $(PWD)/stb $(INCLUDE_OUT)/stb
	@$(call hecho,"Done syncing", "stb"," repro") 	


#######################################################################################
# stt-stl
stt-stl:
	@make -s common
	@rm -rf $(TEMP)/stt-stl
	@$(call fetch_git_repro,stt-stl,https://github.com/SnapperTT/stt-stl)
	rm -f $(INCLUDE_OUT)/stt-stl
	ln -s $(PWD)/stt-stl $(INCLUDE_OUT)/stt-stl
	@$(call hecho,"Done syncing", "stt-stl"," repro") 


#######################################################################################
# stt-obj
stt-obj:
	@make -s common
	@rm -rf $(TEMP)/stt-obj
	@$(call fetch_git_repro,stt-obj,https://github.com/SnapperTT/stt-obj)
	rm -f $(INCLUDE_OUT)/stt-obj
	ln -s $(PWD)/stt-obj $(INCLUDE_OUT)/stt-obj
	@$(call hecho,"Done syncing", "stt-obj"," repro") 	
	
#######################################################################################
# sttr
sttr:
	@make -s common
	@rm -rf $(TEMP)/sttr
	@$(call fetch_git_repro,sttr,https://github.com/SnapperTT/sttr)
	rm -f $(INCLUDE_OUT)/sttr
	ln -s $(PWD)/sttr $(INCLUDE_OUT)/sttr
	@$(call hecho,"Done syncing", "sttr"," repro") 


#######################################################################################
# tsl
tsl:
	@make -s common
	@rm -rf $(TEMP)/tsl
	@$(call fetch_git_release,tsl,https://github.com/Tessil/robin-map,Source,tar.gz)
	rm -f $(INCLUDE_OUT)/tsl
	ln -s $(PWD)/tsl/include/tsl $(INCLUDE_OUT)/tsl
	@$(call hecho,"Done syncing", "tsl"," repro") 


#######################################################################################
# vecgui
vecgui:
	@make -s common
	@rm -rf $(TEMP)/vecgui
	@$(call fetch_git_repro,vecgui,https://github.com/SnapperTT/vecgui)
	rm -f $(INCLUDE_OUT)/vecgui
	ln -s $(PWD)/vecgui/vgui_sttr/ $(INCLUDE_OUT)/vecgui
	@$(call hecho,"Done syncing", "vecgui"," repro") 


#######################################################################################
# vg-renderer
vg-renderer:
	@make -s common
	@rm -rf $(TEMP)/vg-renderer
	@$(call fetch_git_repro,vg-renderer,https://github.com/SnapperTT/vg-renderer)
	sed -i 's/#include <vg/\/\/#include <vg/g' $(PWD)/vg-renderer/src/*.cpp
	rm -f $(INCLUDE_OUT)/vg-renderer
	ln -s $(PWD)/vg-renderer/ $(INCLUDE_OUT)/vg-renderer
	@$(call hecho,"Done syncing", "vg-renderer"," repro") 

#######################################################################################
# xxHash
xxHash:
	@make -s common
	@rm -rf $(TEMP)/xxHash
	@$(call fetch_git_repro,xxHash,https://github.com/Cyan4973/xxHash)
	rm -f $(INCLUDE_OUT)/xxHash
	ln -s $(PWD)/xxHash $(INCLUDE_OUT)/xxHash
	@$(call hecho,"Done syncing", "xxHash"," repro") 


#######################################################################################
# All
.PHONY: all-sources
all-sources: $(ALL_SOURCES)

.PHONY: all-binaries
all-binaries: $(ALL_SOURCES) $(ALL_BINARIES)

.PHONY: all
all: all-binaries
	@echo "Done"


