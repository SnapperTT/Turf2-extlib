#diff -ruN ../bgfx_old/bgfx/include/bgfx/bgfx.h ./include/bgfx/bgfx.h
--- ../bgfx_old/bgfx/include/bgfx/bgfx.h	2025-03-07 11:52:38.306749738 +0800
+++ ./include/bgfx/bgfx.h	2025-03-07 11:51:46.259782112 +0800
@@ -26,6 +26,8 @@
 /// BGFX
 namespace bgfx
 {
+	typedef void(*abortHandlerFunction)(const char*);
+	extern abortHandlerFunction g_abortHandler; 
 	/// Fatal error enum.
 	///
 	/// @attention C99's equivalent binding is `bgfx_fatal_t`.
@@ -2024,6 +2026,9 @@
 	/// @attention C99's equivalent binding is `bgfx_get_renderer_name`.
 	///
 	const char* getRendererName(RendererType::Enum _type);
+	
+	/// Gets a human readable description of the active rendering device 
+	int getDeviceDescription(char* out, const int maxLen);
 
 	/// Initialize the bgfx library.
 	///
#diff -ruN ../bgfx_old/bgfx/src/bgfx.cpp ./src/bgfx.cpp
--- ../bgfx_old/bgfx/src/bgfx.cpp	2025-03-07 11:52:38.310083091 +0800
+++ ./src/bgfx.cpp	2025-03-07 11:53:17.953646449 +0800
@@ -27,6 +27,7 @@
 
 namespace bgfx
 {
+	abortHandlerFunction g_abortHandler = 0;
 #define BGFX_API_THREAD_MAGIC UINT32_C(0x78666762)
 
 #if BGFX_CONFIG_MULTITHREADED
@@ -82,6 +83,7 @@
 			}
 			else
 			{
+				if (g_abortHandler) g_abortHandler("BGFX FATAL");
 				abort();
 			}
 		}
@@ -455,6 +457,7 @@
 		if (BX_UNLIKELY(NULL == g_callback) )
 		{
 			bx::debugPrintf("%s(%d): BGFX FATAL 0x%08x: %s", _filePath, _line, _code, out);
+			if (g_abortHandler) g_abortHandler("BGFX FATAL");
 			abort();
 		}
 		else
@@ -3443,6 +3446,12 @@
 		return s_rendererCreator[_type].name;
 	}
 
+	int getDeviceDescription(char* out, const int maxLen) {
+		BX_ASSERT(s_ctx, "No bgfx context");
+		BX_ASSERT(s_ctx->m_renderCtx, "No rendering context");
+		return s_ctx->m_renderCtx->getDeviceDescription(out, maxLen);
+		}
+	
 	PlatformData::PlatformData()
 		: ndt(NULL)
 		, nwh(NULL)
#diff -ruN ../bgfx_old/bgfx/src/bgfx_p.h ./src/bgfx_p.h
--- ../bgfx_old/bgfx/src/bgfx_p.h	2025-03-07 11:52:38.310083091 +0800
+++ ./src/bgfx_p.h	2025-03-07 11:50:45.019429838 +0800
@@ -3073,6 +3073,7 @@
 		virtual ~RendererContextI() = 0;
 		virtual RendererType::Enum getRendererType() const = 0;
 		virtual const char* getRendererName() const = 0;
+		virtual int getDeviceDescription(char* out, const int maxLen) const = 0;
 		virtual bool isDeviceRemoved() = 0;
 		virtual void flip() = 0;
 		virtual void createIndexBuffer(IndexBufferHandle _handle, const Memory* _mem, uint16_t _flags) = 0;
#diff -ruN ../bgfx_old/bgfx/src/renderer_d3d11.cpp ./src/renderer_d3d11.cpp
--- ../bgfx_old/bgfx/src/renderer_d3d11.cpp	2025-03-07 11:52:38.313416444 +0800
+++ ./src/renderer_d3d11.cpp	2025-03-07 11:50:45.022763191 +0800
@@ -1743,6 +1743,24 @@
 		{
 			return BGFX_RENDERER_DIRECT3D11_NAME;
 		}
+		
+		int getDeviceDescription(char* out, const int maxLen) const override
+		{
+			const DXGI_ADAPTER_DESC& desc = m_dxgi.m_adapterDesc;
+			char description[BX_COUNTOF(desc.Description)];
+			wcstombs(description, desc.Description, BX_COUNTOF(desc.Description) );
+			
+			char dedicatedVideo[16];
+			bx::prettify(dedicatedVideo, BX_COUNTOF(dedicatedVideo), desc.DedicatedVideoMemory);
+			char dedicatedSystem[16];
+			bx::prettify(dedicatedSystem, BX_COUNTOF(dedicatedSystem), desc.DedicatedSystemMemory);
+			char sharedSystem[16];
+			bx::prettify(sharedSystem, BX_COUNTOF(sharedSystem), desc.SharedSystemMemory);
+			char processMemoryUsed[16];
+			bx::prettify(processMemoryUsed, BX_COUNTOF(processMemoryUsed), bx::getProcessMemoryUsed() );
+
+			return bx::snprintf(out, maxLen, "Device: %s\nDedicated Video Memory: %s\nDedicated System Memory: %s\nShared System Memory: %s\nUsed Memory: %s", description, dedicatedVideo, dedicatedSystem, sharedSystem, processMemoryUsed);
+		}
 
 		void createIndexBuffer(IndexBufferHandle _handle, const Memory* _mem, uint16_t _flags) override
 		{
#diff -ruN ../bgfx_old/bgfx/src/renderer_d3d12.cpp ./src/renderer_d3d12.cpp
--- ../bgfx_old/bgfx/src/renderer_d3d12.cpp	2025-03-07 11:52:38.316749796 +0800
+++ ./src/renderer_d3d12.cpp	2025-03-07 11:50:45.022763191 +0800
@@ -1706,6 +1706,29 @@
 		{
 			return BGFX_RENDERER_DIRECT3D12_NAME;
 		}
+		
+		int getDeviceDescription(char* out, const int maxLen) const override
+		{
+			#if BX_PLATFORM_LINUX
+					const DXGI_ADAPTER_DESC desc = {};
+			#else
+					const DXGI_ADAPTER_DESC& desc = m_dxgi.m_adapterDesc;
+			#endif // BX_PLATFORM_LINUX
+			char description[BX_COUNTOF(desc.Description)];
+			wcstombs(description, desc.Description, BX_COUNTOF(desc.Description) );
+			
+			char dedicatedVideo[16];
+			bx::prettify(dedicatedVideo, BX_COUNTOF(dedicatedVideo), desc.DedicatedVideoMemory);
+			char dedicatedSystem[16];
+			bx::prettify(dedicatedSystem, BX_COUNTOF(dedicatedSystem), desc.DedicatedSystemMemory);
+			char sharedSystem[16];
+			bx::prettify(sharedSystem, BX_COUNTOF(sharedSystem), desc.SharedSystemMemory);
+			char processMemoryUsed[16];
+			bx::prettify(processMemoryUsed, BX_COUNTOF(processMemoryUsed), bx::getProcessMemoryUsed() );
+
+			return bx::snprintf(out, maxLen, "Device: %s\nDedicated Video Memory: %s\nDedicated System Memory: %s\nShared System Memory: %s\nUsed Memory: %s", description, dedicatedVideo, dedicatedSystem, sharedSystem, processMemoryUsed);
+		}
+
 
 		bool isDeviceRemoved() override
 		{
#diff -ruN ../bgfx_old/bgfx/src/renderer_gl.cpp ./src/renderer_gl.cpp
--- ../bgfx_old/bgfx/src/renderer_gl.cpp	2025-03-07 11:52:38.316749796 +0800
+++ ./src/renderer_gl.cpp	2025-03-07 11:50:45.022763191 +0800
@@ -2936,12 +2936,12 @@
 						);
 				}
 
-//				if (s_extension[Extension::ARB_clip_control].m_supported)
-//				{
-//					GL_CHECK(glClipControl(GL_LOWER_LEFT, GL_ZERO_TO_ONE) );
-//					g_caps.originBottomLeft = true;
-//				}
-//				else
+				if (s_extension[Extension::ARB_clip_control].m_supported)
+				{
+					GL_CHECK(glClipControl(GL_LOWER_LEFT, GL_ZERO_TO_ONE) );
+					g_caps.originBottomLeft = true;
+				}
+				else
 				{
 					g_caps.homogeneousDepth = true;
 					g_caps.originBottomLeft = true;
@@ -3262,6 +3262,16 @@
 		{
 			return BGFX_RENDERER_OPENGL_NAME;
 		}
+		
+		int getDeviceDescription(char* out, const int maxLen) const override
+		{
+			//const char* m_vendor      = getGLString(GL_VENDOR);
+			//const char* m_renderer    = getGLString(GL_RENDERER);
+			//const char* m_version     = getGLString(GL_VERSION);
+			//const char* m_glslVersion = getGLString(GL_SHADING_LANGUAGE_VERSION);
+			
+			return bx::snprintf(out, maxLen, "Vendor: %s\nRenderer: %s %s\nGLSL Version: %s", m_vendor, m_renderer, m_version, m_glslVersion);
+		}
 
 		bool isDeviceRemoved() override
 		{
#diff -ruN ../bgfx_old/bgfx/src/renderer_mtl.mm ./src/renderer_mtl.mm
--- ../bgfx_old/bgfx/src/renderer_mtl.mm	2025-03-07 11:52:38.316749796 +0800
+++ ./src/renderer_mtl.mm	2025-03-07 11:50:45.026096543 +0800
@@ -957,6 +957,8 @@
 		{
 			return BGFX_RENDERER_METAL_NAME;
 		}
+		
+		int getDeviceDescription(char* out, const int maxLen) const override { BX_UNUSED(out); BX_UNUSED(maxLen); return 0; }
 
 		void createIndexBuffer(IndexBufferHandle _handle, const Memory* _mem, uint16_t _flags) override
 		{
#diff -ruN ../bgfx_old/bgfx/src/renderer_noop.cpp ./src/renderer_noop.cpp
--- ../bgfx_old/bgfx/src/renderer_noop.cpp	2025-03-07 11:52:38.316749796 +0800
+++ ./src/renderer_noop.cpp	2025-03-07 11:50:45.022763191 +0800
@@ -90,6 +90,8 @@
 		{
 			return BGFX_RENDERER_NOOP_NAME;
 		}
+		
+		int getDeviceDescription(char* out, const int maxLen) const override { BX_UNUSED(out); BX_UNUSED(maxLen); return 0; }
 
 		bool isDeviceRemoved() override
 		{
#diff -ruN ../bgfx_old/bgfx/src/renderer_vk.cpp ./src/renderer_vk.cpp
--- ../bgfx_old/bgfx/src/renderer_vk.cpp	2025-03-07 11:52:38.320083149 +0800
+++ ./src/renderer_vk.cpp	2025-03-07 11:50:45.026096543 +0800
@@ -2214,6 +2214,53 @@
 			return BGFX_RENDERER_VULKAN_NAME;
 		}
 
+		int getDeviceDescription(char* out, const int maxLen) const override
+		{
+			const VkPhysicalDeviceProperties& pdp = m_deviceProperties;
+			VkPhysicalDeviceMemoryBudgetPropertiesEXT dmbp;
+			dmbp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT;
+			dmbp.pNext = NULL;
+
+			int64_t gpuMemoryAvailable = -INT64_MAX;
+			int64_t gpuMemoryUsed      = -INT64_MAX;
+
+			if (s_extension[Extension::EXT_memory_budget].m_supported)
+			{
+				VkPhysicalDeviceMemoryProperties2 pdmp2;
+				pdmp2.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
+				pdmp2.pNext = &dmbp;
+
+				vkGetPhysicalDeviceMemoryProperties2KHR(m_physicalDevice, &pdmp2);
+
+				gpuMemoryAvailable = 0;
+				gpuMemoryUsed      = 0;
+
+				for (uint32_t ii = 0; ii < m_memoryProperties.memoryHeapCount; ++ii)
+				{
+					if (!!(m_memoryProperties.memoryHeaps[ii].flags & VK_MEMORY_HEAP_DEVICE_LOCAL_BIT) )
+					{
+						gpuMemoryAvailable += dmbp.heapBudget[ii];
+						gpuMemoryUsed += dmbp.heapUsage[ii];
+					}
+				}
+			}
+			int seek = bx::snprintf(out, maxLen, "Device: %s (%s)\n", pdp.deviceName, getName(pdp.deviceType));
+
+			for (uint32_t ii = 0; ii < m_memoryProperties.memoryHeapCount; ++ii)
+			{
+				char budget[16];
+				bx::prettify(budget, BX_COUNTOF(budget), dmbp.heapBudget[ii]);
+
+				//char usage[16];
+				//bx::prettify(usage, BX_COUNTOF(usage), dmbp.heapUsage[ii]);
+
+				const bool local = (!!(m_memoryProperties.memoryHeaps[ii].flags & VK_MEMORY_HEAP_DEVICE_LOCAL_BIT) );
+
+				seek += bx::snprintf(&out[seek], maxLen - seek, "\nMemory %d %s - Budget: %12s", ii, local ? "(local)    " : "(non-local)", budget);//, usage);
+			}
+			return seek;
+		}
+		
 		bool isDeviceRemoved() override
 		{
 			return false;
